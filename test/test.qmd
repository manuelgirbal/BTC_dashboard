---
title: "A bitcoin dashboard"
server: shiny
format:
  dashboard:
    orientation: rows
    scrolling: true
    theme: lux
---

```{r}
#| context: setup
#| include: false

options(scipen=999)

library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT)
library(lubridate)

# source("scripts/prices.R")
# source("scripts/transactions.R")
load("test.RData")

```

# Basic metrics

## Row {height="150"}

### Column
```{r}
#| content: valuebox
#| title: "Current price"
#| width: 200
#| height: 120

list(
  icon = "currency-bitcoin",
  color = "primary",
  value = paste("$",round(tail(btcprice$price,1),1))
)
```

### Column
```{r}
#| content: valuebox
#| title: "Total transactions"
#| width: 200
#| height: 120

list(
  icon = "wifi",
  color = "primary",
  value = sum(df_txs$txs)
)
```


## Row

### {.sidebar}

```{r}

radioButtons("time_period",
            label = "Select Time Period:",
            choices = list("7 days" = "7d",
                           "1 month" = "1m", 
                           "3 months" = "3m", 
                           "1 year" = "1a", 
                           "Maximum" = "max"),
                  selected = "max")

```


### Column 

```{r}
#| title: "Bitcoin's daily USD price"

plotlyOutput("plot_btcprice")

```

```{r}
#| context: server

# Find the range of dates in the data
date_range <- range(btcprice$date)
start_date <- date_range[1]
end_date <- date_range[2]

btcprice_reactive <- reactive({
  
  btcprice |>
    filter(date >= case_when(
      input$time_period == "7d" ~ end_date - 7,
      input$time_period == "1m" ~ end_date  %m-% months(1),
      input$time_period == "3m" ~ end_date  %m-% months(3),
      input$time_period == "1a" ~ end_date  %m-% years(1),
      input$time_period == "max" ~ start_date
      ))
  
})

output$plot_btcprice <- renderPlotly({
  
  p1 <- ggplot(btcprice_reactive(), aes(date, price)) +
    geom_line(linewidth = 0.8) +
    ylab("") +
    xlab("") +
    scale_x_date(date_breaks = "2 years", date_labels = "%Y") +
    theme(plot.background = element_rect(fill = "#FCE9D6"),
          panel.background = element_rect(fill = "#FCE9D6"))
  
  ggplotly(p1)
  
})

```


### Column 

```{r}
#| title: "Bitcoin's monthly transactions"

plotlyOutput("plot_txs")

```

```{r}
#| context: server

# Find the range of dates in the data
date_range <- range(btcprice$date)
start_date <- date_range[1]
end_date <- date_range[2]

df_txs_reactive <- reactive({
  
  df_txs |>
    filter(date >= case_when(
      input$time_period == "7d" ~ end_date - 7,
      input$time_period == "1m" ~ end_date  %m-% months(1),
      input$time_period == "3m" ~ end_date  %m-% months(3),
      input$time_period == "1a" ~ end_date  %m-% years(1),
      input$time_period == "max" ~ start_date
      ))
  
})

output$plot_txs <- renderPlotly({
  
  p2 <- ggplot(df_txs_reactive(), aes(date, txs)) +
    geom_line(linewidth = 0.5) +
    ylab("") +
    xlab("") +
    scale_x_date(date_breaks = "2 years", date_labels = "%Y") +
    theme(plot.background = element_rect(fill = "#FCE9D6"),
          panel.background = element_rect(fill = "#FCE9D6"))
  
  ggplotly(p2)
  
})

```

## Row

### Column 

```{r}
#| title: "Bitcoin's average yearly USD price"

datatable(yearly_price,
          options = list(
            lengthChange = FALSE,
            searching = FALSE,
            paging = FALSE,
            info = FALSE,
            columnDefs = list(list(className = 'dt-center', targets = "_all"))
            ),
          rownames = FALSE) |>
  formatPercentage("year_var") |> 
  formatCurrency("avg_price",
                 currency = "$") |>
  formatStyle(names(yearly_price),
              textAlign = "center",
              target = "cell")  |> 
  formatStyle("year_var",
              fontWeight = "bold",
              backgroundColor = styleInterval(c(-0.01, 0.01),
                                              c("#FFCDD2", "#FCE9D6", "#C8E6C9")))


```

### Column

```{r}
#| title: "Bitcoin's yearly transactions"

datatable(yearly_txs,
          options = list(
            lengthChange = FALSE,
            searching = FALSE,
            paging = FALSE,
            info = FALSE,
            columnDefs = list(list(className = 'dt-center', targets = "_all"))
            ),
          rownames = FALSE) |>
  formatPercentage("year_var") |> 
  formatStyle(names(yearly_txs),
              textAlign = "center",
              target = "cell")  |> 
  formatStyle("year_var",
              fontWeight = "bold",
              backgroundColor = styleInterval(c(-0.01, 0.01),
                                              c("#FFCDD2", "#FCE9D6", "#C8E6C9")))


```



